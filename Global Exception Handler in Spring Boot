### âœ… Global Exception Handler in Spring Boot

A **Global Exception Handler** is used to handle all exceptions across your Spring Boot application in a centralized manner â€” rather than adding try-catch blocks in each controller/service.

---

### ðŸ”§ How to Implement Global Exception Handling

You use `@ControllerAdvice` and `@ExceptionHandler` annotations.

---

### âœ… 1. Create a Custom Exception

```java
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
```

---

### âœ… 2. Global Exception Handler Class

```java
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<String> handleResourceNotFound(ResourceNotFoundException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGlobalException(Exception ex) {
        return new ResponseEntity<>("Something went wrong: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
```

---

### âœ… 3. Throw Exception in Controller

```java
@GetMapping("/user/{id}")
public User getUserById(@PathVariable int id) {
    User user = userService.findById(id);
    if (user == null) {
        throw new ResourceNotFoundException("User not found with id " + id);
    }
    return user;
}
```

---

### ðŸ’¡ Benefits

* Centralized error handling
* Cleaner controller/service code
* Easily returns user-friendly error messages or structured JSON

---

### âœ… Optional: Return a Structured Error Response

Create a DTO class:

```java
public class ErrorResponse {
    private String message;
    private LocalDateTime timestamp;
    private int status;

    // constructors, getters, setters
}
```

Update handler method:

```java
@ExceptionHandler(ResourceNotFoundException.class)
public ResponseEntity<ErrorResponse> handleResourceNotFound(ResourceNotFoundException ex) {
    ErrorResponse error = new ErrorResponse(ex.getMessage(), LocalDateTime.now(), HttpStatus.NOT_FOUND.value());
    return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
}
```

---

Let me know if you want to return error responses in JSON format or include validation errors too.
