- An ORM tool simplifies the data creation, data manipulation and data access and It is a programming technique that maps the object to the data stored in the database.
- The ORM tool internally uses the JDBC API to interact with the database. 

What is JPA?
Java Persistence API (JPA) is a Java specification that provides specific functionality and is a standard for ORM tools.
javax.persistence package contains the JPA classes and interfaces.

✅ Hibernate Framework - Summary for Interview
🔹 Why Hibernate? (Limitations of JDBC)
- JDBC code is database-dependent; switching DBs is costly.
- Not portable across different databases.
- Requires boilerplate code: long repetitive code reduces readability.
- Exception handling is mandatory.
- No support for Object-level relationships.
- Manual work needed for DDL operations (e.g., table creation).

🟢 Hibernate solves these issues with abstraction, portability, reduced code, and OOP support.

🔹 What is Hibernate?
Hibernate is an open-source, light-weight, non-invasive Java ORM (Object-Relational Mapping) framework.
It handles persistence logic (storing data for long-term use).
Abstracts JDBC — does internal DB connection, query execution, etc.
Helps build database-independent applications using HQL (Hibernate Query Language).



| Feature                  | JDBC                      | Hibernate                     |
| ------------------------ | ------------------------- | ----------------------------- |
| DB Dependency            | High (SQL is DB-specific) | Low (Uses HQL)                |
| Boilerplate Code         | Yes                       | No                            |
| Exception Handling       | Mandatory                 | Optional                      |
| Object Mapping           | No (primitive data only)  | Yes (uses POJOs)              |
| Auto DDL (Create Tables) | Manual                    | Automatic                     |
| Primary Key Generation   | Manual                    | Automatic                     |
| Cache Support            | No                        | Yes (1st & 2nd level caching) |
| Portability              | Low                       | High                          |


🔹 Hibernate Features (for Interview Mention)
Auto DDL (Create, Alter, Drop tables automatically)

Auto Primary Key Generation

HQL (Database-independent query language)

Caching Support

Object-Relational Mapping (Maps tables to Java objects)

Can be used standalone or with other frameworks (Spring, Struts, etc.)

=> Lifecycle
1. Transient State - object created
					 not connected in db
2. Persistent State- object is connected with session
					 save and load entity in db
3. Detached State- close session /clear cache
4. Removed State- entity object deleted from db 

=>🔹 What is JPA?
JPA = Java Persistence API
It’s just a specification, not actual code.
It tells how ORM (Object-Relational Mapping) should work in Java.
Provided by javax.persistence package.
To actually use JPA, we need an implementation like Hibernate.

✅ Key Points:
JPA is like a set of rules.
Works with EntityManager to handle DB operations.
Uses JPQL (Java Persistence Query Language).
Helps switch between different ORM tools easily (like from Hibernate to EclipseLink).

🔹 What is Hibernate?
Hibernate is an ORM Framework (real working software).
It is the most popular implementation of JPA.
Provided by org.hibernate package.
You can use Hibernate with or without JPA.

✅ Key Points:
Hibernate follows all JPA rules and adds extra features.
Uses Session and SessionFactory for DB operations.
Uses HQL (Hibernate Query Language).
Handles complex mapping, caching, and database portability.

| Feature        | JPA                                     | Hibernate                           |
| -------------- | --------------------------------------- | ----------------------------------- |
| Type           | Specification (API)                     | Framework (Implementation)          |
| Package        | `javax.persistence`                     | `org.hibernate`                     |
| DB Interface   | `EntityManager`, `EntityManagerFactory` | `Session`, `SessionFactory`         |
| Query Language | JPQL                                    | HQL                                 |
| Purpose        | Defines how ORM tools should work       | Actual tool that works with the DB  |
| Flexibility    | Lets you switch between ORM tools       | Tightly coupled unless used via JPA |

🧠 Why JPA is Needed?
JPA allows developers to write code to a standard.
You can change ORM tool (e.g., Hibernate to EclipseLink) without rewriting business logic.
Ensures code is less dependent on a specific tool.

| **Feature**                | **JDBC** (Java Database Connectivity)                                   | **Hibernate** (ORM Framework)                                                             |
| -------------------------- | ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| **Object Mapping**         | You have to write code manually to map Java objects to database tables. | Hibernate automatically maps Java objects to tables using annotations.                    |
| **Query Language**         | Uses plain SQL (Structured Query Language).                             | Uses HQL (Hibernate Query Language) which is similar to SQL but understands Java objects. |
| **Exception Handling**     | You must handle exceptions like `SQLException` using try-catch.         | Hibernate handles exceptions internally using unchecked exceptions.                       |
| **Database Dependency**    | Code is tightly coupled to a specific database.                         | Code works with many databases; just change config slightly.                              |
| **Relationship Mapping**   | Hard to manage relations like one-to-many or many-to-one.               | Easy to define relationships using annotations.                                           |
| **Type**                   | A low-level API to connect Java with the database.                      | A complete Java framework that manages everything.                                        |
| **Lazy Loading Support**   | Not supported (fetches everything eagerly).                             | Supported (loads data only when needed).                                                  |
| **Performance**            | Slower because of manual handling.                                      | Faster due to caching, lazy loading, and smart fetching.                                  |
| **Transaction Management** | You must manage transactions manually (begin, commit, rollback).        | Hibernate handles transactions for you automatically.                                     |
| **Support**                | Better community and customer support.                                  | Community support is available but might be slower.                                       |


| **Feature**              | **ORM (Object Relational Mapping)**                               | **JDBC (Java Database Connectivity)**                            |
| ------------------------ | ----------------------------------------------------------------- | ---------------------------------------------------------------- |
| **Speed**                | Slightly slower than JDBC (because of extra abstraction).         | Faster than ORM for basic operations.                            |
| **SQL Requirement**      | You write **less SQL** – much is handled automatically.           | You must write **full SQL queries** manually.                    |
| **Code for Saving Data** | Automatically stores Java objects to DB using mapping.            | You need to **write all the code** to insert/update data.        |
| **Frontend Integration** | ORM tools like Hibernate are easy to connect with frontend.       | JDBC is not frontend-friendly and needs more setup.              |
| **Backend Flow**         | ORM internally uses JDBC to interact with the DB.                 | JDBC directly communicates with the database.                    |
| **Flexibility**          | Very flexible – you can fetch, update even a single field easily. | Less flexible – you must manage result sets and update manually. |
| **Ease of Use**          | Easier to use in large projects due to automatic mapping.         | More manual work – better for small/simple applications.         |
| **Object Mapping**       | Maps Java objects to DB tables automatically.                     | No built-in mapping – you handle data conversion manually.       |

Using hibernate.cfg.xml (main XML file defining the database JDBC details, SQL dialects, etc.,) a mapping file that maps the columns of a table and a POJO class. (Here it is geekuser.hbm.xml) we can do all the CRUD operations easily in Hibernate.

ibernate SessionFactory has three methods namely  getCurrentSession(), openSession() and openStatelessSession(). In our code, we are using openSession(). 
Annotations

Use of annotations

@Entity 	Used for declaring any POJO class as an entity for a database
@Table	Used to change table details, some of the attributes are-
name - override the table name,schema,catalogue,enforce unique constraints
@Id	Used for declaring a primary key inside our POJO class
@GeneratedValue	Hibernate automatically generate the values with reference to the internal sequence and we don't need to set the values manually.
@Column	It is used to specify column mappings. It means if in case we don't need the name of the column that we declare in POJO but we need to refer to that entity you can change the name for the database table. Some attributes are-

Name - We can change the name of the entity for the database
length - the size of the column mostly used in strings
unique - the column is marked for containing only unique values
nullable - The column values should not be null. It's marked as NOT
@Transient	Tells the hibernate, not to add this particular column
@Temporal	This annotation is used to format the date for storing in the database
@Lob	Used to tell hibernate that it's a large object and is not a simple object
@OrderBy	
This annotation will tell hibernate to OrderBy as we do in SQL.

For example - we need to order by student firstname in ascending order

@OrderBy("firstname asc") 

Flow
Configuration: Loads and parses hibernate.cfg.xml, creating a Configuration object.
SessionFactory: Reads the configuration and builds a SessionFactory. This is a singleton object used throughout the application.
Session: Created from the SessionFactory to represent a single unit of work with the database. Each session is used to perform database operations.
Transaction: Manages the atomicity of a group of operations. Transactions are started, committed, or rolled back within a session.
Query: Retrieves data from the database using HQL or Criteria API. Queries are created, executed, and results are processed.

Hibernate Architecture – Easy Notes
Hibernate has a layered architecture that separates different concerns and simplifies database interaction using Java objects.

✅ 1. Configuration
First object created in a Hibernate app.
Loads database settings and mapping info.
Comes from:
hibernate.cfg.xml (XML config file)
hibernate.properties

🟢 Purpose: Sets up database connection and Java class to DB table mapping.

✅ 2. SessionFactory
Created from the Configuration object.
Heavyweight and thread-safe – created once during app startup.
One per database.
Used to get Session objects.

🟢 Purpose: Produces sessions for DB operations.

✅ 3. Session
Created from SessionFactory.
Lightweight and not thread-safe.
Used to save, update, delete, or fetch objects from the DB.
Open only when needed.

🟢 Purpose: Main interface between Java app and DB.

✅ 4. Transaction
Manages DB operations as a unit of work.
Ensures all operations commit or rollback together.
Works with JDBC or JTA.

🟢 Purpose: Group multiple DB operations safely.

✅ 5. Query
Uses HQL or SQL to fetch data.
You can set parameters, limit rows, etc.
🟢 Purpose: Custom data retrieval using queries.

✅ 6. Criteria (or CriteriaBuilder in JPA)
Used for object-oriented queries (no SQL/HQL needed).

More readable and flexible.
🟢 Purpose: Dynamic query creation using Java code.

StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();  
Metadata meta = new MetadataSources(ssr).getMetadataBuilder().build();  

// Create the SessionFactory Instance
SessionFactory factory = meta.getSessionFactoryBuilder().build();  

// Create the session
Session session = factory.openSession();  

// Create the transaction
Transaction t = session.beginTransaction();

hibernate.cfg.xml

<?xml version='1.0' encoding='UTF-8'?>  
<!DOCTYPE hibernate-configuration PUBLIC  
   "-//Hibernate/Hibernate Configuration DTD 5.3//EN"  
   "http://hibernate.org/dtd/hibernate-configuration-3.0.dtd">  

<hibernate-configuration>  
   <session-factory>  
      <property name="hbm2ddl.auto">update</property>  
      <property name="dialect">org.hibernate.dialect.MySQL8Dialect</property>  
      <property name="connection.url">jdbc:mysql://localhost/TUTORIALSPOINT</property>  
      <property name="connection.username">root</property>  
      <property name="connection.password">guest123</property>  
      <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>  
      <mapping resource="employee.hbm.xml"/>  
   </session-factory>  
</hibernate-configuration>

The hbm2ddl.auto property in Hibernate defines how your database schema is handled. Possible values are:

create − If the value is 'create', Hibernate creates a new table in the database when the SessionFactory object is created. In case a table exists in the database with the same name, it deletes the table along with data and creates a new table.
update − If the value is 'update', then Hibernate first validates whether the table is present in the database. If present, it alters that table as per the changes. If not, it creates a new one.
validate − If the value is 'validate', then Hibernate only verifies whether the table is present. If the table does not exist then it throws an exception.
create-drop − If the value is 'create-drop', then Hibernate creates a new table when SessionFactory is created, performs required operations, and deletes the table when SessionFactory is destroyed. This value is used for testing hibernate code.
none − It does not make any changes to the schema.

Employee.hbm.xml

<?xml version = "1.0" encoding = "utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"> 

<hibernate-mapping>
   <class name = "Employee" table = "EMPLOYEE">
      
      <meta attribute = "class-description">
         This class contains the employee detail. 
      </meta>
      
      <id name = "id" type = "int" column = "id">
         <generator class="native"/>
      </id>
      
      <property name = "firstName" column = "first_name" type = "string"/>
      <property name = "lastName" column = "last_name" type = "string"/>
      <property name = "salary" column = "salary" type = "int"/>
      
   </class>
</hibernate-mapping>

🔸 Hibernate Caching – Simplified Notes
✅ What is Caching?
Caching stores frequently accessed data in memory.

Reduces database hits → improves performance.

✅ Types of Hibernate Caching
1️⃣ First-Level Cache
Default and always available.

Works per Session.

If the same object is fetched again in the same session → fetched from cache, not from DB.

🟢 No setup needed.

2️⃣ Second-Level Cache
Optional, shared across Sessions.

Helps store objects across sessions.

You can cache specific entity classes.

🛠️ Steps to use:

Enable cache in hibernate.cfg.xml

Choose a cache provider (e.g., EHCache, OSCache, JBoss Cache).

Add <cache usage="read-write"/> in mapping file.

3️⃣ Query-Level Cache
Caches query results.

Useful when same query is run with same parameters often.

🛠️ Steps to use:

Enable in hibernate.cfg.xml:
<property name="hibernate.cache.use_query_cache">true</property>

✅ Best Practices
Use first-level cache always (default).
Enable second-level cache for frequently used, rarely changing data.
Use query cache only for static queries with repeatable parameters.
Test performance before and after enabling cache.
🔄 Hibernate Object Lifecycle Recap
In Hibernate, an entity (e.g., Employee) passes through several states:

Transient – New object, not associated with any Hibernate session.

Persistent – Bound to a session and tracked for changes.

Detached – Once the session is closed, the object becomes detached.

Removed – Marked for deletion from DB.

🧩 Role of Interceptor
The Interceptor interface provides callbacks (hook methods) that let you interact with these state transitions.

Hibernate automatically calls these methods, enabling tasks like:

| Method           | Purpose                                                |
| ---------------- | ------------------------------------------------------ |
| `onSave()`       | Called **before object is inserted**                   |
| `onFlushDirty()` | Called **before object is updated**                    |
| `onDelete()`     | Called **before object is deleted**                    |
| `onLoad()`       | Called **before object is initialized (lazy loading)** |
| `preFlush()`     | Called **before flush() is executed**                  |
| `postFlush()`    | Called **after flush() is executed**                   |
| `findDirty()`    | Used to determine which properties changed             |
| `isUnsaved()`    | Used to determine if object is new                     |
| `instantiate()`  | Controls object instantiation                          |

public class MyInterceptor extends EmptyInterceptor {
   private int updates;
   private int creates;
   private int loads;

   public void onDelete(Object entity, Serializable id,
      Object[] state, String[] propertyNames, Type[] types) {
       // do nothing
   }

   // This method is called when Employee object gets updated.
   public boolean onFlushDirty(Object entity, Serializable id,
      Object[] currentState, Object[] previousState, String[] propertyNames,
      Type[] types) {
         if ( entity instanceof Employee ) {
            System.out.println("Update Operation");
            return true; 
         }
         return false;
   }
	
   public boolean onLoad(Object entity, Serializable id,
      Object[] state, String[] propertyNames, Type[] types) {
         // do nothing
         return true;
   }
   
   // This method is called when Employee object gets created.
   public boolean onSave(Object entity, Serializable id,
      Object[] state, String[] propertyNames, Type[] types) {
         if ( entity instanceof Employee ) {
            System.out.println("Create Operation");
            return true; 
         }
         return false;
   }
   
   //called before commit into database
   public void preFlush(Iterator iterator) {
      System.out.println("preFlush");
   }
   
   //called after committed into database
   public void postFlush(Iterator iterator) {
      System.out.println("postFlush");
   }
}


--------------------------------------------
difference b/w @Bean and @Component

Here’s a simple explanation of `@Bean` and `@Component` annotations in Spring, along with differences and examples — perfect for interview prep:

---

### ✅ `@Component` Annotation

* **Purpose:** Marks a class as a Spring-managed component (bean).
* **Use Case:** Applied to **custom classes** so Spring can auto-detect and register them using **component scanning**.
* **Required:** Class must be picked up via `@ComponentScan`.

### 🔧 Example:

```java
@Component
public class EmailService {
    public void sendEmail(String msg) {
        System.out.println("Sending: " + msg);
    }
}
```

---

### ✅ `@Bean` Annotation

* **Purpose:** Declares a method that **manually creates and returns a Spring bean**.
* **Use Case:** Used inside a `@Configuration` class when **you want full control** over bean creation.
* **Required:** Defined inside a class annotated with `@Configuration`.

### 🔧 Example:

```java
@Configuration
public class AppConfig {

    @Bean
    public EmailService emailService() {
        return new EmailService();
    }
}
```

---

### 🔍 Key Differences Between `@Bean` and `@Component`

| Feature               | `@Component`                     | `@Bean`                                         |
| --------------------- | -------------------------------- | ----------------------------------------------- |
| **Applies To**        | Class                            | Method                                          |
| **Bean Registration** | Automatic via classpath scanning | Manual via configuration class                  |
| **Customization**     | Limited                          | High control over object creation               |
| **Use In**            | Service, DAO, Controller layers  | Third-party libraries, or non-annotated classes |
| **Declared In**       | The class itself                 | A method inside a `@Configuration` class        |

---

### 🧠 Interview Tip:

If the class is **your own** and you want **auto-detection**, use `@Component`.
If the class comes from a **third-party library**, and you **can't annotate it**, use `@Bean`.

---

Would you like a visual diagram or code project demonstrating both in action?
