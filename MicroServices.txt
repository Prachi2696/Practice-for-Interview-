MicroServices
- Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of two or more services that are:
Independently deployable
Loosely coupled



What are the main components of Microservices Architecture?
Main components of microservices architecture include:

Microservices: Small, loosely coupled services that handle specific business functions, each focusing on a distinct capability.
API Gateway: Acts as a central entry point for external clients also they manage requests, authentication and route the requests to the appropriate microservice.
Service Registry and Discovery: Keeps track of the locations and addresses of all microservices, enabling them to locate and communicate with each other dynamically.
Load Balancer: Distributes incoming traffic across multiple service instances and prevent any of the microservice from being overwhelmed.
Containerization: Docker encapsulate microservices and their dependencies and orchestration tools like Kubernetes manage their deployment and scaling.
Event Bus/Message Broker: Facilitates communication between microservices, allowing pub/sub asynchronous interaction of events between components/microservices.
Database per Microservice: Each microservice usually has its own database, promoting data autonomy and allowing for independent management and scaling.
Caching: Cache stores frequently accessed data close to the microservice which improved performance by reducing the repetitive queries.
Fault Tolerance and Resilience Components: Components like circuit breakers and retry mechanisms ensure that the system can handle failures gracefully, maintaining overall functionality.

Microservices Architecture Patterns | SAGA Choreography

- The SAGA Design Pattern is a pattern used to manage long-running and distributed transactions
- the SAGA pattern breaks down a complex transaction into a series of smaller, isolated operations, each handled by a different service.

What is 2PC for Distributed Transaction Management?
2PC (Two-Phase Commit) is a protocol used to ensure all participants in a distributed transaction either commit or abort, ensuring consistency. In the first phase, the coordinator asks all participants to agree to commit, and in the second phase, participants either vote to commit or abort the transaction.
Problems with Traditional Distributed Transaction Protocols
Traditional distributed transaction protocols like Two-Phase Commit (2PC) have limitations in modern systems, primarily due to:

Blocking Nature: If the coordinator fails after initiating the transaction, participants may be left waiting indefinitely, causing delays.
Single Points of Failure: The coordinator is crucial for decision-making. If it crashes, the entire transaction can get stuck, impacting reliability.
Network Partitions: If the network splits, some nodes might not receive the final decision, leading to inconsistent states (i.e., some nodes might commit while others don’t), which causes data inconsistency.

SAGA is needed because 2PC, while simple, doesn't work well in distributed systems where availability and fault tolerance are critical.

How SAGA Design Pattern Works?
The SAGA Design Pattern manages long-running distributed transactions by breaking them into smaller steps, each with its own compensating action in case of failure. Here’s how it works:

Breaking Down the Transaction: A big transaction is divided into smaller, independent sub-transactions (steps), each handled by different services. For example, reserving a product, charging the customer, and shipping the item.
Independent Execution: Each step runs independently without waiting for the others to finish. If a step succeeds, the next step proceeds.
SAGA Execution Coordinator: The SAGA Execution Coordinator manages and coordinate the flow of these steps, triggering each one in sequence.
Compensating Actions: If any step fails, the system doesn’t roll back everything. Instead, it executes compensating actions to undo the work done in previous successful steps, like refunding a payment or canceling a reservation.
SAGA Log: Helps manage and track the state of a long-running distributed transaction, ensuring that all steps are completed successfully or properly compensated in case of failure.
Approaches to Implemement SAGA Design Pattern
Below are the two main approaches to implementing the SAGA pattern:

1. Choreography-Based Approach (Event-Driven)
There is no central coordinator; each service knows what to do next and triggers the next step by emitting events.
Services communicate through events (e.g., via message queues or event streams). Each service listens for events and performs its own action when the event occurs.
Services operate independently and don’t need to know about each other’s details, just the events they need to react to.
If a service fails, it publishes a failure event, and other services can listen to it and perform compensating actions.
choreography-based-approach-event-driven_
Choreography-Based Approach (Event-Driven)
Example:

Order Service creates an order and publishes the "OrderCreated" event.
Payment Service listens for "OrderCreated" and processes payment, publishing "PaymentProcessed".
Inventory Service listens for "PaymentProcessed" and updates inventory, and so on.
2. Orchestration-Based Approach (Centralized)
A single SAGA Execution Coordinator (orchestrator) controls the flow of the entire saga.
The orchestrator tells each service when to start, what to do, and when to proceed to the next step.
The orchestrator has detailed knowledge of each service and their responsibilities in the saga.
The orchestrator manages failure recovery and calls the compensating actions if needed.
orchestration-based-approach-centralized_
Orchestration-Based Approach (Centralized)
Example:

The SAGA Execution Coordinator starts the saga and tells the Order Service to create the order.
Once the Order Service succeeds, the orchestrator tells the Payment Service to process the payment, and so on.